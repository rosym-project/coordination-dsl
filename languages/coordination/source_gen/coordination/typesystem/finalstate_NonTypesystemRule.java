package coordination.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class finalstate_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public finalstate_NonTypesystemRule() {
  }

  public void applyRule(final SNode stateContainer, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    boolean hasfinalstate = false;
    for (SNode state : ListSequence.fromList(SLinkOperations.getTargets(stateContainer, "states", true))) {
      if (SPropertyOperations.getBoolean(state, "isfinalstate")) {
        hasfinalstate = true;
      }
    }
    if (!(hasfinalstate)) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportInfo(stateContainer, SPropertyOperations.getString(stateContainer, "name") + " does not have a final state.", "r:3d73eed1-12be-4e9c-825b-07051d38a984(coordination.typesystem)", "6168113672290281305", null, errorTarget);
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "coordination.structure.StateContainer";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
