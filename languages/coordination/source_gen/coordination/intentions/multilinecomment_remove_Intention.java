package coordination.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class multilinecomment_remove_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public multilinecomment_remove_Intention() {
  }

  public String getConcept() {
    return "coordination.structure.ICanBeCommented";
  }

  public String getPresentation() {
    return "multilinecomment_remove";
  }

  public String getPersistentStateKey() {
    return "coordination.intentions.multilinecomment_remove_Intention";
  }

  public String getLanguageFqName() {
    return "coordination";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return (AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute("coordination.structure.MultiLineComment")) != null);
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:fa465466-148c-48dd-abe9-55e5b2c4fbe7(coordination.intentions)", "2935010982282513230");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new multilinecomment_remove_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Remove Multi-Line Comment";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNodeOperations.deleteNode(AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute("coordination.structure.MultiLineComment")));
    }

    public IntentionDescriptor getDescriptor() {
      return multilinecomment_remove_Intention.this;
    }
  }
}
